#!/usr/bin/python3
#+
# inotipy example: execute a given command for each file in a
# specified directory, waiting as new files appear. Invoke this script
# as follows:
#
#     for_in_dir [«options»] «dir» «cmd» ...
#
# where «dir» is the directory to watch, and the rest of the line
# makes up the «cmd» to execute. The command can access the passed
# filename in the environment variable named as «filevar» below.
#
# Valid «options» are as follows:
#
#     --filevar=«filevar»
#          specifies the «filevar» name (required).
#     --ignore-initial
#          ignore the files already in the directory, only
#          process new ones that appear after this command starts.
#     --timeout=«timeout»
#          specifies how long to wait in seconds (fractions allowed)
#          for the next file to appear before quitting. Default
#          is to wait forever.
#
# Example:
#
#     for_in_dir --ignore-initial --timeout=5 --filevar=FILE /tmp sh -c 'file "$FILE"'
#
# watches the /tmp directory, ignoring what’s already in there, invoking
# (via the shell, to do variable substitution) the “file” command with the
# name of each new file that appears. If no new file appears after an
# interval of 5 seconds, the command terminates.
#
# Copyright 2020 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import stat
import subprocess
import asyncio
import getopt
import inotify
from inotify import \
    IN

filevar = None
ignore_initial = False
timeout = None
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["filevar=", "ignore-initial", "timeout="]
  )
for keyword, value in opts :
    if keyword == "--filevar" :
        filevar = value
    elif keyword == "--ignore-initial" :
        ignore_initial = True
    elif keyword == "--timeout" :
        timeout = float(value)
        if timeout < 0 :
            timeout = None
        #end if
    #end if
#end for
if filevar == None :
    raise getopt.GetoptError("forgot to specify --filevar")
#end if
if len(args) < 2 :
    raise getopt.GetoptError("directory or command missing")
#end if
dir = args[0]
cmd = args[1:]

loop = asyncio.get_event_loop()

def feed(item) :
    # invokes the command for another item. Ignores anything
    # that isn’t a regular file.
    item_path = os.path.join(dir, item)
    info = os.lstat(item_path)
    if stat.S_ISREG(info.st_mode) :
        os.environ[filevar] = item_path
        subprocess.check_call(args = cmd)
    #end if
#end feed

async def mainline() :
    if not ignore_initial :
        for item in os.listdir(dir) :
            feed(item)
        #end for
    #end if
    watcher = inotify.Watcher.create()
    watcher.watch(dir, IN.MOVED_TO | IN.CLOSE_WRITE)
      # Note I ignore IN.CREATE. Instead I wait for the created file
      # to be closed with IN.CLOSE_WRITE so its contents will be complete.
    async for event in watcher.iter_async \
      (
        stop_on = {inotify.STOP_ON.TIMEOUT},
        timeout = timeout
      ) :
         feed(event.pathname)
    #end for
#end mainline

try :
    loop.run_until_complete(mainline())
except KeyboardInterrupt :
    pass
#end try
