#!/usr/bin/python3
#+
# inotipy example: perform dummy “processing” on all items dropped
# in a watched directory. Invoke this script as follows:
#
#     dir_processor «path»
#
# where «path» is the path of a directory to be created. The directory
# will be monitored for all items created or dropped in it; the “file”
# command will be used to display information for each file, after which
# it will be deleted.
#
# NOTE: the directory must not already exist; it will be created
# when the script starts, and deleted when it stops. (Deleting it yourself
# will also stop the script.) This is because the program deletes files,
# so I wanted to forestall accidents from telling it to watch the wrong
# directory.
#
# Copyright 2018 by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>. This
# script is licensed CC0
# <https://creativecommons.org/publicdomain/zero/1.0/>; do with it
# what you will.
#-

import sys
import os
import asyncio
import getopt
import subprocess
import atexit
import shutil
import inotify
from inotify import \
    IN

loop = asyncio.get_event_loop()

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    []
  )
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the directory to watch")
#end if
basedir = args[0]

os.mkdir(basedir)

def del_basedir() :
    try :
        shutil.rmtree(basedir)
    except OSError :
        pass
    #end try
#end del_basedir
atexit.register(del_basedir)

async def mainline() :
    watcher = inotify.Watcher.create()
    dir_watch_flags = \
        (IN.CLOSE_WRITE | IN.MOVED_TO | IN.MOVED_FROM | IN.CREATE | IN.DELETE | IN.DELETE_SELF | IN.IGNORED)
    basedir_watch = watcher.watch(basedir, dir_watch_flags)
    watches_by_pathname = {basedir : basedir_watch}
    pathnames_by_watch = {basedir_watch : basedir}
    while True :
        event = await watcher.get()
        item_path = os.path.join(pathnames_by_watch.get(event.watch, ""), event.pathname)
        # sys.stdout.write("event %s\n" % repr(event)) # debug
        if event.mask & IN.DELETE_SELF != 0 :
            if event.watch == basedir_watch :
                sys.stdout.write("base dir %s gone\n" % item_path)
                break
            #end if
        elif event.mask & IN.ISDIR != 0 :
            if event.mask & (IN.CREATE | IN.MOVED_TO) != 0 :
                sys.stdout.write("new dir %s\n" % item_path)
                subwatch = watcher.watch(item_path, dir_watch_flags)
                watches_by_pathname[item_path] = subwatch
                pathnames_by_watch[subwatch] = item_path
            #end if
            if event.mask & (IN.DELETE | IN.MOVED_FROM) != 0 :
                sys.stdout.write("gone dir %s\n" % item_path)
                del pathnames_by_watch[watches_by_pathname[item_path]]
                del watches_by_pathname[item_path]
            #end if
        else :
            # it’s a file
            # Only process when it has been closed (or moved in its entirety
            # from elsewhere), not when it is initially created, to give time
            # for its contents to be written.
            if event.mask & (IN.CLOSE_WRITE | IN.MOVED_TO) != 0 :
                sys.stdout.write("new file %s\n" % item_path)
                subprocess.check_call \
                  (
                    args = ("file", item_path)
                  )
                os.unlink(item_path)
            #end if
        #end if
    #end while
#end mainline

loop.run_until_complete(mainline())
